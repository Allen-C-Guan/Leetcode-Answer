'''
其实这个题本就是让你设计计算机本来的乘除法的实现。
在计算机内部，乘除法本就是通过移位得到的。

首先要明白：
1. 移位表示的是二进制位的移动，左移代表十进制的 * 2， 右移表示十进制 /2。
2. 最重要的一点： 数字在不同进制下的计算，并不会影响计算的结果！！，只会影响表达形式和运算法则。
    而你要做到就是，在某一个进制下，使用正确的对应的一套计算法则和表达方式。就一定会得到正确的值。
3. 即使计算机显示的是10进制，但是如果使用位运算，内部仍然是使用二进制运算法则，只不过是转换成10进制显示而已。


二进制的乘除法：
小学除法，除数从高位到低位，依次除，而后做减法。
1. 高位到低位相除，等同于先把除数后面补零到和被除数同个数量级，而后在逐渐去掉后面的零
2. 补零和去掉零等于移位
3. 十进制的移位等于 *10 or /10， 二进制的移位等于 *2 /2
4. 二进制每一位上的商只有两个结果 0，1，其分别表示，要不起！大你！ （10进制有10个结果）
知道以上结论就可以很轻易的知道如何设计该问题。


'''

class Solution:
    def divide(self, dividend: int, divisor: int) -> int:
        sign = (dividend < 0) ^ (divisor < 0)  # ^ 位运算表示按位异或
        cnt = 0
        res = 0
        divisor = abs(divisor)
        dividend = abs(dividend)
        # 先把除数的数量级升到和被除数一个数量级
        while divisor <= dividend:
            cnt += 1
            divisor <<=1

        while cnt > 0:
            cnt -= 1
            res <<= 1
            divisor >>= 1
            if divisor <= dividend:
                res += 1 # 竖式除法中，该位上1，否则该位会自动补0
                dividend -= divisor

        res = -res if sign else res

        return res if -(1<<31) <= res <= (1<<31)-1 else (1<<31)-1

'''
该代码段里面，我所有的运算用的都是二进制计算，加法只加0 or 1，乘法除法只移位（*2 /2)，
因此一套体系下的计算，一定会得到正确的答案，和进制无关。尽管表达和计算法则不同
'''
